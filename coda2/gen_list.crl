#
#  Readout list using fa125 as a trigger source
#    - POLLING MODE
#    Bryan Moffit, TJNAF 2016
#
#   Compile with
#     vxWorks:  make -B ARCH=PPC gen_list.o
#     Linux  :  make -B gen_list.so
#

readout list GEN_USER
maximum 1024,512
polling
general readout

# DEBUG the readout
const DEBUG=0
%%
#ifdef VXWORKSPPC
#include "vxWorks.h"
#endif
#include "jvme.h"
#include "fa125Lib.h"

/* Replace 'general readout' polling routine with our own */
#define GEN_TEST check_fa125

/* Prototype (defined at bottom) to provide a yes/no to data ready */
unsigned int check_fa125();

/* Global vars */
extern int nfa125;
int faslot;
extern int bigendian_out;

%%

############################################################
# DOWNLOAD
############################################################
begin download

#
# Toss in some stuff from Naomis CRL
#
const PL=110 #pulse latency
const NW=110 #window size
const IE=100 #integral end
const NPK=1  #n peaks
const P1=4   #4  #event pedestal=2**P1
const P2=4   #4  #local pedestal=2**P2
const PG=4   #ped gap
const H=500  #hit thres
const TH=64 #high timing thres
const TL=16  #low timing thres
const IBIT=4  #integral scaling factor 2**4=16
const ABIT=3  #maxamp scaling factor 2**3=8

%%
{
  int stat, iFlag = 0, nmods = 18, iadc;
  int ichan, i;

#ifdef VXWORKSPPC
  bigendian_out = 0;
#else
  bigendian_out = 1;
  vmeOpenDefaultWindows();
#endif

  iFlag |= FA125_INIT_INT_SUM_TRIG; /* Trigger Source */
  iFlag |= FA125_INIT_VXS_CLKSRC;   /* Clock Source */
  iFlag |= FA125_INIT_SKIP_FIRMWARE_CHECK; /*skip fw check */

  stat = fa125Init(3 << 19, 1 << 19, nmods, iFlag);
  if (stat != OK)
    {
      printf("ERROR: fa125Init failed \n");
    }

  for (iadc = 0; iadc < nfa125; iadc++)
    {
      faslot = fa125Slot(iadc);
      fa125PowerOn(faslot);

      fa125SetProcMode(0,"CDC_long",PL,NW,IE,PG,NPK,P1,P2);
      for (ichan = 0; ichan < 72; ichan++)
	{
	  fa125SetOffset(faslot, ichan, 0x0400);
	}

      for (i = 0; i < 3; i++)
	{
	  fa125SetPulserAmplitude(0, i, 0x8000);
	}

      fa125SetCommonThreshold(faslot, 0x2);


      fa125PrintTemps(faslot);

      fa125SetBlocklevel(faslot, 1);

    }

  fa125ResetToken(0);
  fa125GStatus(0);


}
%%

  log inform "User Download Executed"

end download

############################################################
# PRESTART
############################################################
begin prestart

  variable jj, adc_id

  log inform "Entering User Prestart"

  init trig source GEN
  link sync trig source GEN 1 to usrtrig and usrtrig_done
  event type 1 then read GEN 1

  log inform "User Prestart Executed"

end prestart

############################################################
# PAUSE
############################################################
begin pause

  CDODISABLE(GEN,1,0);

  log inform "User Pause Executed"

end pause

############################################################
# GO
############################################################
begin go

  log inform "Entering User Go"
%%
{
  int iadc;

  for (iadc = 0; iadc < nfa125; iadc++)
    {
      faslot = fa125Slot(iadc);

      fa125Reset(faslot, 0);
      fa125Enable(faslot);
    }
}
%%

  CDOENABLE(GEN,1,1);

end go

############################################################
# END
############################################################
begin end

  CDODISABLE(GEN,1,0);
%%
{
  int iadc;

  fa125GStatus(0);
  for (iadc = 0; iadc < nfa125; iadc++)
    {
      faslot = fa125Slot(iadc);
      fa125PrintTemps(faslot);
      fa125PowerOff(faslot);
    }

}
%%

  log inform "User End Executed"

end end

############################################################
# TRIGGER
############################################################
begin trigger usrtrig

  variable ii

 open event type EVTYPE of BT_UI4

%%
{
  int i, dCnt, rflag = 1;
  vmeDmaConfig(2, 3, 1); // 3 for my slot Universe Chip.  5 for the Tempe Chip

  dCnt =
    fa125ReadBlock(faslot, (volatile UINT32 *) rol->dabufp, 0x3000, rflag);

  if (dCnt <= 0)
    {
      printf("No fa125 (%d) data or error.  dCnt = %d\n", faslot, dCnt);
    }
  else
    {
      rol->dabufp += dCnt;

      if(DEBUG)
	{
	  for(i = 0; i < dCnt; i++)
	    {
	      fa125DecodeData(__the_event__->data[i]);
	    }
	}
    }


}
%%

 close event

end trigger

begin done usrtrig

end done

begin done

# Re-enable Trigger Source here
%%
{

}
%%

end done

############################################################
# STATUS
############################################################
begin status

end status

%%
unsigned int
check_fa125(void)
{
  static int icall=0; /* Variable to keep track of calls, if you're interested */
  int ready = 0;

  icall++;

  ready = fa125Bready(0);

  if(ready > 0)
    return 1;
  else
    return 0;

}
%%

#ifndef VXWORKSPPC
%%
__attribute__((destructor)) void end (void)
{
  printf("ROC Cleanup\n");
  vmeCloseDefaultWindows();
}
%%
#endif
